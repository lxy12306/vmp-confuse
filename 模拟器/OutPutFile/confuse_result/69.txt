0: mov dx, word ptr [edi]               
<dx_w><edi_r><mem_r>
2: add edi, 2                           
<edi_r><edi_w>
3: lea esi, [esi - 1]                   
<esi_r><esi_w>
6: movzx ecx, byte ptr [esi]            
<ecx_w><esi_r><mem_r>
9: xor cl, bl                           
<bl_r><cl_r><cl_w>
12: add cl, 0xbf                        
<cl_r><cl_w>
14: xor cl, 0xa1                        
<cl_r><cl_w>
16: dec cl                              
<cl_r><cl_w>
19: not cl                              
<cl_r><cl_w>
20: rol cl, 1                           
<cl_r><cl_w>
21: xor bl, cl                          
<bl_r><bl_w><cl_r>
24: mov word ptr [esp + ecx], dx        
<dx_r><ecx_r><esp_r><mem_w>
26: sub esi, 4                          
<esi_r><esi_w>
28: mov edx, dword ptr [esi]            
<edx_w><esi_r><mem_r>
32: xor edx, ebx                        
<ebx_r><edx_r><edx_w>
34: xor edx, 0x4b0b7466                 
<edx_r><edx_w>
35: sub edx, 0x465f1928                 
<edx_r><edx_w>
37: bswap edx                           
<edx_r><edx_w>
40: rol edx, 2                          
<edx_r><edx_w>
41: xor ebx, edx                        
<ebx_r><ebx_w><edx_r>
43: add ebp, edx                        
<ebp_r><ebp_w><edx_r><eflag_w>
45: push ebp                            
<ebp_r><esp_r><esp_w><mem_w>
end:: ret                               

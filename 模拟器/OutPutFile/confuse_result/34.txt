0: mov cx, word ptr [edi]               
<cx_w><edi_r><mem_r>
2: mov ax, word ptr [edi + 2]           
<ax_w><edi_r><mem_r>
3: sub edi, 2                           
<edi_r><edi_w>
5: not cx                               
<cx_r><cx_w>
7: not ax                               
<ax_r><ax_w>
9: or cx, ax                            
<ax_r><cx_r><cx_w><eflag_w>
10: mov word ptr [edi + 4], cx          
<cx_r><edi_r><mem_w>
12: pushfd                              
<eflag_r><esp_r><esp_w>
15: pop dword ptr [edi]                 
<edi_r><esp_r><esp_w><mem_w>
16: lea esi, [esi - 4]                  
<esi_r><esi_w>
20: mov eax, dword ptr [esi]            
<eax_w><esi_r><mem_r>
21: xor eax, ebx                        
<eax_r><eax_w><ebx_r>
23: ror eax, 3                          
<eax_r><eax_w>
25: sub eax, 0x37419aa                  
<eax_r><eax_w>
26: xor eax, 0x50541319                 
<eax_r><eax_w>
28: bswap eax                           
<eax_r><eax_w>
29: xor ebx, eax                        
<eax_r><ebx_r><ebx_w>
30: add ebp, eax                        
<eax_r><ebp_r><ebp_w>
33: lea ecx, [esp + 0x60]               
<ecx_w><esp_r>
35: cmp edi, ecx                        
<ecx_r><edi_r><eflag_w>
end:: jmp ebp                           
